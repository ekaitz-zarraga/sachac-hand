#+PROPERTY: header-args python  :noweb yes 
I want to be able to generate fonts quickly from the handwriting
samples I can draw on my tablet PC or my phone. 

* Things I needed to install 

sudo apt-get install python3-fontforge python3-numpy python3-sqlalchemy python3-pandas python3-pymysql python3-nltk

* Parameters

#+NAME: params
#+begin_src python :results output
import numpy as np
# Reshape this
params = {'template': 'files/template-256.png',
  'sample_file': '/home/sacha/code/font/files/sample.png',
  'name_list': 'files/aglfn.txt',
  'new_font_file': 'files/SachaHand.sfd',
  'new_otf': '/home/sacha/.fonts/SachaHand.otf',
  'new_font_name': 'sachacHand',
  'default_bearing': 40,
  'new_family_name': 'sachacFonts',
  'text_color': 'lightgray',
  'new_full_name': 'sachacHand',
  'glyph_dir': 'files/glyphs/',
  'font_name': '/home/sacha/.fonts/Breip.ttf', #'/home/sacha/.fonts/Romochka.otf',
  'output_text': 'ooooooooonnnnnnnnn hhhhhhhooooohhhhhoooohohohoho',
  'output_file': 'files/output.pdf',
  'letters': 'HOnodpagscebhklftijmnruwvxyzCGABRDLEFIJKMNPQSTUVWXYZ0123456789?:;-–—=!\'’"“”@/\\~_#$%&()*+,.<>[]^`{|}',
  'direction': 'vertical',
  'rows': 10, 
  'columns': 10, 
  'x_height': 325,
  'em': 1000, 
  'em_width': 1000, 
  'ascent': 800, 
  'descent': 200, 
  'height': 500, 
  'width': 500, 
  'caps': 650,
  'line_width': 3
  }
params['font_size'] = int(params['em'] * 0.88)
params['baseline'] = params['em'] - params['descent']
def transpose_letters(letters, width, height):
  return ''.join(np.reshape(list(letters.ljust(100)), (10, 10)).transpose().reshape(-1))
#+end_src

#+RESULTS: params

* Figure out what glyphs I need

#+NAME: connect-to-db
#+begin_src python :eval no
from dotenv import load_dotenv
from sqlalchemy import create_engine
import os
import pandas as pd
import pymysql
load_dotenv(dotenv_path="/home/sacha/code/docker/blog/.env", verbose=True)

sqlEngine       = create_engine('mysql+pymysql://' + os.getenv('PYTHON_DB'), pool_recycle=3600)
dbConnection    = sqlEngine.connect()
#+end_src

** Check glyphs

#+begin_src python :results table
<<connect-to-db>>
df           = pd.read_sql("select post_title from wp_posts WHERE post_type='post' AND post_status='publish'", dbConnection);
# Debugging
#q = df[~df['post_title'].str.match('^[A-Za-z0-9\? "\'(),\-:\.\*;/@\!\[\]=_&\?\$\+#^{}\~]+$')]
#print(q)
from collections import Counter
df['filtered'] = df.post_title.str.replace('[A-Za-z0-9\? "\'(),\-:\.\*;/@\!\[\]=_&\?\$\+#^{}\~]+', '')
#print(df['filtered'].apply(list).sum())
res = Counter(df.filtered.apply(list).sum())
return res.most_common()
#+end_src

#+RESULTS:
| Â    | 65 |
| Ã    | 57 |
| ‚    | 39 |
| ƒ    | 33 |
| ’    | 13 |
| £    |  8 |
| \x81 |  4 |
| ¤    |  4 |
| »    |  4 |
| ¦    |  3 |
| ¿    |  3 |
| –    |  3 |
| —    |  2 |
| ¥    |  2 |
| ¨    |  2 |
| €    |  2 |
| ō    |  2 |
| %    |  2 |
| \t   |  1 |
| „    |  1 |
| Ÿ    |  1 |
| Š    |  1 |
| œ    |  1 |
| ¬    |  1 |
| ª    |  1 |
| ž    |  1 |
| <    |  1 |
| >    |  1 |
| ¹    |  1 |
| …    |  1 |
| §    |  1 |
| ¸    |  1 |
| Ž    |  1 |
| ¼    |  1 |
| Œ    |  1 |
| \xa0 |  1 |
| \x8d |  1 |
| †    |  1 |
| «    |  1 |
| ā    |  1 |
| ē    |  1 |
| č    |  1 |

** Look up posts with weird glyphs

#+NAME: check-posts
#+begin_src python :results output :var char="–"
<<connect-to-db>>
df           = pd.read_sql("select id, post_title from wp_posts WHERE post_type='post' AND post_status='publish' AND post_title LIKE %(char)s limit 10;", dbConnection, params={"char": '%' + char + '%'});
print(df)
#+end_src

#+RESULTS: check-posts
:       id                                         post_title
: 0   7059    Wiki organization challenge – thinking out loud
: 1   7330   Setting up my new tablet PC – apps, config, etc.
: 2  22038  Work on the business from the outside, not in ...

** Get frequency of pairs of characters

#+NAME: digrams
#+begin_src python :results value scalar :cache yes
<<connect-to-db>>
df = pd.read_sql("select post_title from wp_posts WHERE post_type='post' AND post_status='publish'", dbConnection);
from collections import Counter
s = df.post_title.apply(list).sum()
res = Counter('{}{}'.format(a, b) for a, b in zip(s, s[1:]))
common = res.most_common(100)
return ''.join([x[0] for x in common])
#+end_src

#+RESULTS[5a3f821b4bbfcb462cebc176c66bcb697c6bf4f2]: digrams
: innge g s  treeron aanesy entit orndthn ee: ted atarr hetont, acstou o fekne rieWe smaalewo 20roea mle w 2itvi e pk rimedietioomchev cly01edlil ve i braisseha Wotdece dcotahih looouticurel laseccssila

* DONE Generate guidelines
** Code to make the template
#+NAME: template
#+begin_src python 
from PIL import Image, ImageFont, ImageDraw
<<params>>
#LETTERS = 'abcd'
# Baseline is red
# descent: lightblue
def draw_letter(origin, letter, params):
  draw = params['draw']
  draw.line((origin[0], origin[1], origin[0], origin[1] + params['em']), fill='lightgray', width=params['line_width'])
  draw.line((origin[0], origin[1] + params['ascent'] - params['x_height'], origin[0] + params['em_width'], origin[1] + params['ascent'] - params['x_height']), fill='lightgray', width=params['line_width'])
  draw.line((origin[0], origin[1] + params['ascent'], origin[0] + params['em_width'], origin[1] + params['ascent']), fill='red', width=params['line_width'])
  draw.line((origin[0], origin[1] + params['ascent'] - params['caps'], origin[0] + params['em_width'], origin[1] + params['ascent'] - params['caps']), fill='lightgreen', width=params['line_width'])
  draw.line((origin[0], origin[1], origin[0] + params['em_width'], origin[1]), fill='black', width=params['line_width'])
  width, height = draw.textsize(letter, font=params['font'])
  draw.text((origin[0] + (params['em_width'] - width) / 2, origin[1]), letter, font=params['font'], fill=params['text_color'])

def make_template(params):
  img = Image.new('RGB', (params['columns'] * params['em'], params['rows'] * params['em_width']), 'white')
  params['draw'] = ImageDraw.Draw(img)
  params['font'] = ImageFont.truetype(params['font_name'], params['font_size'])
  draw_letters = params['letters'].ljust(params['rows'] * params['columns'])
  if params['direction'] == 'vertical':
    draw_letters = transpose_letters(draw_letters, params['columns'], params['rows'])
  for r in range(params['rows']):
    for c in range(params['columns']):
      draw_letter((c * params['em_width'], r * params['em']), draw_letters[r * params['rows'] + c], params)
  img.thumbnail((params['columns'] * params['height'], params['columns'] * params['width']))
  img.save(params['template'])
  return params['template']
#+end_src

** Actually make the templates
#+begin_src python :results file
<<template>>
#make_template({**params, 'font_name': '/home/sacha/.fonts/Romochka.otf', 'template': 'files/template-romochka.png'}) 
#make_template({**params, 'font_name': '/home/sacha/.fonts/Breip.ttf', 'template': 'files/template-breip.png'}) 
return make_template({**params, 'font_name': '/home/sacha/.fonts/KGPrimaryDots.ttf', 
'letters': 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890?:;-–—=!\'’"“”@/\\~_#$%&()*+,.<>[]^`{|}', 'direction': 'horizontal', 'text_color': 'black',
'template': 'files/template-kg.png', 'ascent': 675, 'descent': 375, 'caps': 525, 'x_height': 300}) 
#return make_template({**params, 'font_name': '/home/sacha/.fonts/Romochka.otf', 
#'template': 'files/template-sample.png', 'direction': 'horizontal', 'rows': 4, 'columns': 4, #'height': 100, 'width': 100 }) 
#+end_src

#+RESULTS:
[[file:files/template-kg.png]]

* TODO Cut into glyphs

(setenv "LD_LIBRARY_PATH" "/usr/local/lib")

#+NAME: glyph_filename
#+begin_src python 
import aglfn
def glyph_filename_base(ch):
  return 'uni%s-%s' % (hex(ord(ch)).replace('0x', '').zfill(4), aglfn.name(ch))
#+end_src

#+begin_src python :results output
import os
import libxml2
from PIL import Image, ImageOps
import subprocess
<<params>>
<<glyph_filename>>
im = Image.open(params['sample_file']).convert('1')
letters = params['letters']
if params['direction'] == 'vertical':
  letters = transpose_letters(letters, params['columns'], params['rows'])
for i, ch in enumerate(letters):  
  top = int(i / params['rows']) * params['height']
  bottom = top + params['height']
  left = int(i % params['columns']) * params['width']
  right = left + params['width']
  small = im.crop((left, top, right, bottom))
  filename = os.path.join(params['glyph_dir'], glyph_filename_base(ch) + '.pbm')
  small.save(filename)
  svg = filename.replace('.pbm', '.svg')
  png = filename.replace('.pbm', '.png')
  small.save(png)
  subprocess.call(['autotrace', '-output-file', svg, filename])
  doc = libxml2.parseFile(svg)
  root = doc.children
  child = root.children
  child.next.unlinkNode()
  doc.saveFile(svg)
#+end_src

#+RESULTS:

* Import SVG outlines into font

#+BEGIN_SRC python :results output
import fontforge
import os
import aglfn
<<params>>
fontforge.loadNamelist(params['name_list'])
font = fontforge.font()
font.em = params['height']
font.encoding = 'UnicodeFull'
font.fontname = params['new_font_name']
font.familyname = params['new_family_name']
font.fullname = params['new_family_name']
cut_letters = params['letters']
if params['direction'] == 'vertical':
  cut_letters = transpose_letters(cut_letters, params['columns'], params['rows'])
for i, ch in enumerate(cut_letters):
  if ch == ' ': continue
  try:
    name = aglfn.name(ch)
    glyph = font.createMappedChar(name)
    base = 'uni%s-%s' % (hex(ord(ch)).replace('0x', '').zfill(4), name)
    svg_filename = os.path.join(params['glyph_dir'], base + '.svg')
    png_filename = os.path.join(params['glyph_dir'], base + '.png')
    glyph.importOutlines(png_filename)
    glyph.importOutlines(svg_filename)
  except:
    print("Error with ", ch)
    pass
font.em = params['em']
font.descent = params['descent']
font.ascent = params['ascent']
space = font.createMappedChar(' ')
space.width = int(params['em'] / 5)
for ch in params['letters']:
  if ch == ' ': continue
  try:
    glyph = font.createMappedChar(aglfn.name(ch))
    glyph.left_side_bearing = glyph.right_side_bearing = params['default_bearing'] 
  except:
    print("Error with ", ch)
font.save(params['new_font_file'])
font.generate(params['new_otf'])
#+END_SRC

#+RESULTS:

* Display sample text

#+CALL: sample(size=70,text="hhhhoooooohhhhhoooohohohoho",filename="files/check")
#+RESULTS:
[[file:files/check/b07b8b758c96f1518d7788229ce6297d.png]]

#+NAME: sample
#+begin_src python :results file :var filename="files/check" :var text="Hello world" :var size=70 :var font_file=""
from PIL import Image, ImageFont, ImageDraw
import os
import hashlib
<<params>>
if font_file == "":
  font_file = params['new_otf']
font = ImageFont.truetype(font_file, size)
font_size = font.getsize(text)
img = Image.new('LA', font_size, 'black')
draw = ImageDraw.Draw(img)
draw.text((0, 0), text, 'white', font)
if os.path.isdir(filename):
  filename = os.path.join(filename, hashlib.md5(text.encode()).hexdigest() + '.png')
img.save(filename)
return filename
#+end_src

#+RESULTS: sample
[[file:files/check/3e25960a79dbc69b674cd4ec67a72c62.png]]


#+CALL: sample(text="hhhhhoooohhhhhoooohooo")
#+RESULTS:
[[file:files/check/df63774e9861483fab011918259a0101.png]]

* Copy metrics from my edited font

** Get the glyph bearings

 #+begin_src python :results table
 import fontforge
 import numpy as np
 import pandas as pd
 f = fontforge.open("/home/sacha/code/font/files/SachaHandEdited.sfd")
 return list(map(lambda g: [g.glyphname, g.left_side_bearing, g.right_side_bearing], f.glyphs()))
 #+end_src

 #+RESULTS:
 | a            |               39.0 |                38.0 |
 | b            |               39.0 |   38.59677350874102 |
 | c            | 38.807172523099524 |                39.0 |
 | d            | 38.853036079593494 |   37.70218462414317 |
 | e            |               23.0 |                39.0 |
 | f            |               22.0 |                28.0 |
 | g            |               39.0 |  38.839263397187665 |
 | h            |  42.44897959183673 |  32.244897959183675 |
 | i            |               39.0 |                39.0 |
 | j            |               29.0 |   37.07269908475212 |
 | k            |            38.7232 |                38.0 |
 | l            | 38.849996883261696 |                24.0 |
 | m            |  38.88120540762966 |  61.872974804436524 |
 | n            |  38.41699749411689 |   50.09722712588024 |
 | o            | 38.861850745445174 |   38.36155030599474 |
 | p            |  38.72189349112426 |  38.806185204215126 |
 | q            | 38.635016803781454 |                38.0 |
 | r            | 39.183503419072274 |                39.0 |
 | s            |               39.0 |                38.0 |
 | t            |               39.0 |                39.0 |
 | u            |  38.68004732178092 |   38.39916483580083 |
 | v            |               39.0 |                39.0 |
 | w            |   38.5881853639986 |   38.21114561800016 |
 | x            |               39.0 |                39.0 |
 | y            |              -25.0 |   36.43496760281849 |
 | z            |               39.0 |                39.0 |
 | A            |  39.38789400666183 |                39.0 |
 | B            |               39.0 |   37.98737993209943 |
 | C            |  39.16280761404536 |                38.0 |
 | D            |               39.0 |   39.51459156482764 |
 | E            |               39.0 |                39.0 |
 | F            |               39.0 |                38.0 |
 | G            |               39.0 |  38.966489765633526 |
 | H            |               39.0 |                38.0 |
 | I            |  38.96694214876033 |               39.25 |
 | J            |               39.0 |  38.464468801750854 |
 | K            |  38.59617220614814 |                38.0 |
 | L            |               39.0 |                38.0 |
 | M            | 38.745166004060955 |                38.0 |
 | N            |  38.73987423309397 |  38.115654115187624 |
 | O            |  38.98891966759004 |   38.81665596263048 |
 | P            | 39.107438016528924 |   38.65155124501666 |
 | Q            |  39.08006855188009 |   38.01570072979803 |
 | R            |               39.0 |                38.0 |
 | S            |               39.0 |   37.81373873377618 |
 | T            |               39.0 |                38.0 |
 | U            |              38.75 |   37.93218925782895 |
 | V            |  38.64979175001243 |                38.0 |
 | W            |               39.0 |   38.97697312351511 |
 | X            |               39.0 |                39.0 |
 | Y            |   39.2011995420152 |  38.493344292403606 |
 | Z            | 38.920094771357476 |                39.0 |
 | zero         |  39.02557980683008 |     38.934353847767 |
 | one          |               39.0 |   37.86668813070091 |
 | two          |               39.0 |                38.0 |
 | three        |               39.0 |   38.30090715487154 |
 | four         |  38.61480785064145 |                38.0 |
 | five         |               39.0 |  38.759568693514495 |
 | six          |   39.2019689704218 |   38.50115350183796 |
 | seven        |               39.0 |   39.45880036173975 |
 | eight        |  39.30732386691426 |   38.81767097798502 |
 | nine         |  39.04800948718441 |  37.956930045381114 |
 | question     |  39.35264826217293 |   38.26531143335521 |
 | colon        |               38.5 |   38.70624687253556 |
 | semicolon    |               39.0 |   39.27324858612964 |
 | hyphen       |               39.0 |                38.0 |
 | equal        |               39.0 |                38.0 |
 | exclam       | 38.783020821373505 |                39.0 |
 | quotesingle  |               39.0 | -1.7598547334076642 |
 | at           | 39.229928128979466 |                38.0 |
 | slash        |               39.0 |                38.0 |
 | backslash    |               39.0 |                39.0 |
 | quotedbl     |  38.86626375007093 |   37.95034254612182 |
 | asciitilde   |  38.68727157672891 |                38.0 |
 | underscore   |               39.0 |                39.0 |
 | numbersign   |               39.0 |  38.740379553133494 |
 | dollar       |               39.0 |  38.734693877551024 |
 | percent      |    39.200007286174 |   38.10774096287298 |
 | ampersand    |  38.96710425694502 |   38.68428307198798 |
 | parenleft    | 39.286819706621706 |                39.0 |
 | parenright   |               39.0 |   39.05824335912013 |
 | asterisk     |               39.0 |                38.0 |
 | plus         |               39.0 |                38.0 |
 | comma        |  38.96546178699183 |   38.55278640450004 |
 | period       |  38.83875395420776 |   37.87092262792087 |
 | less         |  38.97840529870042 |                39.0 |
 | greater      |               39.0 |   37.69246464578106 |
 | bracketleft  | 38.788380868145794 |                38.0 |
 | bracketright |               39.0 |                39.0 |
 | asciicircum  |               39.0 |                38.0 |
 | grave        |               39.0 |                39.0 |
 | braceleft    |   38.7827057593821 |                39.0 |
 | bar          |               39.0 |  38.406427221172024 |
 | braceright   |               39.0 |  38.206693605650514 |
 | space        |                0.0 |               243.0 |
  
 kern_name = f.gpos_lookups[0]
 lookup_info = f.getLookupInfo(kern_name)
 sub = f.getLookupSubtables(kern_name)
 (classes_left, classes_right, array) = f.getKerningClass(sub[0])
 classes_left = list(map(lambda x: ''.join(x or ('Other')), classes_left))
 classes_right = list(map(lambda x: ''.join(x or ('Other')), classes_right))
 kerning = np.array(array).reshape(len(classes_left), len(classes_right))
 df = pd.DataFrame(data=kerning, index=classes_left, columns=classes_right)
 return [classes_right] + df.reset_index().values.tolist()
 #+end_src

** Get the kerning information

 #+NAME: show_kerning
 #+begin_src python :results output drawer :var font="/home/sacha/code/font/files/SachaHandEdited.sfd"
 import fontforge
 import numpy as np
 import pandas as pd
 import orgbabelhelper as ob
 def out(df, **kwargs):
   print(ob.dataframe_to_orgtable(df, **kwargs))
 f = fontforge.open(font)
 kern_name = f.gpos_lookups[0]
 print(kern_name)
 lookup_info = f.getLookupInfo(kern_name)
 print(lookup_info)
 sub = f.getLookupSubtables(kern_name)
 print(sub)
 for subtable in sub:
   (classes_left, classes_right, array) = f.getKerningClass(subtable)
   classes_left = list(map(lambda x: ''.join(x or ('Other')), classes_left))
   classes_right = list(map(lambda x: ''.join(x or ('Other')), classes_right))
   kerning = np.array(array).reshape(len(classes_left), len(classes_right))
   df = pd.DataFrame(data=kerning, index=classes_left, columns=classes_right)
   out(df)
 #+end_src

 #+RESULTS: show_kerning
 :results:
 'kern' Horizontal Kerning in Latin lookup 0
 ('gpos_pair', (), (('kern', (('DFLT', ('dflt',)), ('latn', ('dflt',)))),))
 ("'kern' Horizontal Kerning in Latin lookup 0-1",)
 ||Other|acdeoquwy|ft|s|bhkl|j|i|mnr|ACGOQU|x|Other|
 |-----
 |Other|0|0|0|0|0|0|0|0|0|0|0|
 |fkrt|0|-143|-92|-68|-17|-146|-43|-39|0|-75|0|
 |c|0|-33|-70|-29|-26|0|0|0|0|0|0|
 |T|0|-186|-146|-208|-39|-139|0|0|0|0|0|
 |l|0|0|0|0|0|24|0|0|0|0|0|
 |abemnopu|-25|-38|-89|-31|-18|45|0|-30|0|-23|0|
 |gj|0|0|0|0|0|0|0|0|0|0|0|
 |dh|0|-21|-31|0|0|-98|0|0|0|0|0|
 |s|0|0|-45|-29|0|0|0|0|0|0|0|
 |x|0|-24|-41|0|0|0|0|0|0|0|0|
 |space|0|-21|0|0|0|0|0|0|-68|0|0|
 |P|0|-138|-80|-151|0|-184|-26|-103|0|0|0|

 :end:

* Okay, start kerning my own font

#+CALL: sample(text="My name is Sacha Chua.")

#+RESULTS:
[[file:files/check/7eac967c93c59501f821419b53e135a7.png]]


#+CALL: sample(text="innge g s  treeron aanesy entit orndthn ee")

#+RESULTS:
[[file:files/check/fce1e9a703787c1830f14b6740a19ffa.png]]

#+CALL: sample(text=": ted atarr hetont, acstou o fekne rieWe s")

#+RESULTS:
[[file:files/check/d7eb25371ee2531c1cd7f7b35f463e7f.png]]

#+CALL: sample(text="maalewo 20roea mle w 2itvi e pk rimedietio")

#+RESULTS:
[[file:files/check/8035be0030522279a7f07dad4459f391.png]]

#+CALL: sample(text="omchev cly01edlil ve i braisseha Wotdece d")

#+RESULTS:
[[file:files/check/1a90072c289fbe032810aefc219f8c00.png]]

#+CALL: sample(text="cotahih looouticurel laseccssila")

#+RESULTS:
[[file:files/check/62010679546ef54d7cb54d1a2c20a1b3.png]]

#+CALL: sample(text="oooonnnnooooreteferotofoks")

#+RESULTS:
[[file:files/check/b0a309d52c6f4893f47488901587e7ff.png]]

* Class-based kerning

Right-side classes are the rows, left-side classes are the columns

** Add them to the font

#+begin_src python :results file
  import fontforge
  import os
  import aglfn
  <<params>>
  fontforge.loadNamelist(params['name_list'])
  font = fontforge.open(params['new_font_file'])
  # Create class-based kerning table if it doesn't already exist
  print("Try to add")
  #(('DFLT', ('dflt',)), ('latn', ('dflt',)))
  font.addLookup("kern","gpos_pair",0,[["kern",[["latn",["dflt"]]]]])
  # font.addKerningClass("kern", "kern-1", 18, 10, (("f", "t", "r")), (("o", "c", "e", "a")), True, True)
  font.addKerningClass("kern", "kern-1", ((("f", "t"))), (("Other", "a")), (0, -150, -150, -150))
  print(font.gpos_lookups)
  font.save('/home/sacha/code/font/files/kerned.sfd')
  font.generate("/home/sacha/code/font/files/kerned.otf")
  return "<<sample(text="fafafafay",font_file="/home/sacha/code/font/files/kerned.otf")>>"
#+end_src

#+RESULTS:
[[file:files/check/daf54c82ba14261cc9f870f3ce7887cd.png]]


#+RESULTS:
[[file:files/check/daf54c82ba14261cc9f870f3ce7887cd.png]]

#+CALL: sample(text="oooonnnnooooreteferotofoksofof")

#+RESULTS:
[[file:files/check/4922837dee1fd0fdca929f27e365c19d.png]]

 #+RESULTS: show_kerning
 :results:
 |          | Other | acdeoquwy |   ft |    s | bhkl |    j |   i |  mnr | ACGOQU |   x | Other |
 |----------+-------+-----------+------+------+------+------+-----+------+--------+-----+-------|
 | Other    |     0 |         0 |    0 |    0 |    0 |    0 |   0 |    0 |      0 |   0 |     0 |
 | fkrt     |     0 |      -143 |  -92 |  -68 |  -17 | -146 | -43 |  -39 |      0 | -75 |     0 |
 | c        |     0 |       -33 |  -70 |  -29 |  -26 |    0 |   0 |    0 |      0 |   0 |     0 |
 | T        |     0 |      -186 | -146 | -208 |  -39 | -139 |   0 |    0 |      0 |   0 |     0 |
 | l        |     0 |         0 |    0 |    0 |    0 |   24 |   0 |    0 |      0 |   0 |     0 |
 | abemnopu |   -25 |       -38 |  -89 |  -31 |  -18 |   45 |   0 |  -30 |      0 | -23 |     0 |
 | gj       |     0 |         0 |    0 |    0 |    0 |    0 |   0 |    0 |      0 |   0 |     0 |
 | dh       |     0 |       -21 |  -31 |    0 |    0 |  -98 |   0 |    0 |      0 |   0 |     0 |
 | s        |     0 |         0 |  -45 |  -29 |    0 |    0 |   0 |    0 |      0 |   0 |     0 |
 | x        |     0 |       -24 |  -41 |    0 |    0 |    0 |   0 |    0 |      0 |   0 |     0 |
 | space    |     0 |       -21 |    0 |    0 |    0 |    0 |   0 |    0 |    -68 |   0 |     0 |
 | P        |     0 |      -138 |  -80 | -151 |    0 | -184 | -26 | -103 |      0 |   0 |     0 |

* Mwahahaha! Making my handwriting font, literate programming style




* Along the way
** python aglfn
FileNotFoundError: [Errno 2] No such file or directory: '/home/sacha/.local/lib/python3.8/site-packages/aglfn/agl-aglfn/aglfn.txt'
